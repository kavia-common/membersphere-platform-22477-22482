{"is_source_file": true, "format": "Python", "description": "This Python source file defines a FastAPI router for managing membership-related CRUD operations for users, groups, and organizations within a larger application. It includes endpoints for creating, listing, retrieving, updating, and deleting organizations, users, and groups, as well as batch user imports and role management functionalities. The file integrates with SQLAlchemy ORM models and schemas, and employs role-based access considerations. It is central to the membership management functionality of the system.", "external_files": ["src/api/models", "src/api/schemas", "src/api/auth", "src/api/openapi_schemas"], "external_methods": ["get_db", "hash_password", "User.model_dump", "Role.name"], "published": ["router"], "classes": [{"name": "APIRouter", "description": "FastAPI router instance used to register membership management endpoints."}], "methods": [{"name": "create_org(org_in: OrgCreate, db: Session = Depends(get_db))", "description": "Creates a new organization with validation for existing names.", "scope": "", "scopeKind": ""}, {"name": "list_orgs(skip: int = 0, limit: int = 20, db: Session = Depends(get_db))", "description": "Lists all organizations with pagination.", "scope": "", "scopeKind": ""}, {"name": "get_org(org_id: int, db: Session = Depends(get_db))", "description": "Retrieves details for a specific organization by ID.", "scope": "", "scopeKind": ""}, {"name": "update_org(org_id: int, org_in: OrgCreate, db: Session = Depends(get_db))", "description": "Updates attributes of an existing organization.", "scope": "", "scopeKind": ""}, {"name": "delete_org(org_id: int, db: Session = Depends(get_db))", "description": "Deletes an organization by ID.", "scope": "", "scopeKind": ""}, {"name": "create_user(user_in: UserCreate, db: Session = Depends(get_db))", "description": "Creates a new user with optional roles and associates with an organization.", "scope": "", "scopeKind": ""}, {"name": "list_users( db: Session = Depends(get_db), skip: int = 0, limit: int = 50, org_id: Optional[int] = Query(None), admin_level: Optional[str] = Query(None, description=\"Role filter (Super Admin, State Admin, District Admin, Branch Admin, Member)\"), q: Optional[str] = Query(None, description=\"Free text user search\"), )", "description": "Lists or filters users based on organization, role, or free text search.", "scope": "", "scopeKind": ""}, {"name": "get_user_by_id(user_id: int, db: Session = Depends(get_db))", "description": "Retrieves user details by user ID.", "scope": "", "scopeKind": ""}, {"name": "update_user(user_id: int, user_in: UserUpdate, db: Session = Depends(get_db))", "description": "Updates user information, including password if provided.", "scope": "", "scopeKind": ""}, {"name": "delete_user(user_id: int, db: Session = Depends(get_db))", "description": "Deletes a user.", "scope": "", "scopeKind": ""}, {"name": "batch_import_users( users: List[UserCreate] = Body(...), db: Session = Depends(get_db), )", "description": "Bulk creation of users with success and failure count.", "scope": "", "scopeKind": ""}, {"name": "assign_admin_role( user_id: int, role_name: str = Body(..., embed=True), db: Session = Depends(get_db), )", "description": "Assigns an admin role to a user.", "scope": "", "scopeKind": ""}, {"name": "remove_admin_role( user_id: int, role_name: str = Body(..., embed=True), db: Session = Depends(get_db), )", "description": "Revokes an admin role from a user.", "scope": "", "scopeKind": ""}, {"name": "create_group(group_in: GroupCreate, db: Session = Depends(get_db))", "description": "Creates a new group with optional initial members.", "scope": "", "scopeKind": ""}, {"name": "list_groups( db: Session = Depends(get_db), org_id: Optional[int] = Query(None, description=\"Filter by organization\"), skip: int = 0, limit: int = 50, )", "description": "Lists all groups with optional organization filter.", "scope": "", "scopeKind": ""}, {"name": "get_group(group_id: int, db: Session = Depends(get_db))", "description": "Retrieves group details by ID.", "scope": "", "scopeKind": ""}, {"name": "update_group(group_id: int, group_in: GroupCreate, db: Session = Depends(get_db))", "description": "Updates group details and members.", "scope": "", "scopeKind": ""}, {"name": "delete_group(group_id: int, db: Session = Depends(get_db))", "description": "Deletes a group by ID.", "scope": "", "scopeKind": ""}], "calls": ["get_db", "hash_password", "db.query", "db.add", "db.commit", "db.refresh", "db.delete", "Role.name", "User.model_dump", "get_user_by_id"], "search-terms": ["membership CRUD endpoints", "FastAPI user management", "organization API", "group management", "role assignment", "batch user import", "membership router", "src.api"], "state": 2, "file_id": 9, "knowledge_revision": 24, "git_revision": "2246cb0506789437882dfc8554e82485142f13a9", "revision_history": [{"22": "2246cb0506789437882dfc8554e82485142f13a9"}, {"24": "2246cb0506789437882dfc8554e82485142f13a9"}], "ctags": [{"_type": "tag", "name": "assign_admin_role", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def assign_admin_role($/", "language": "Python", "kind": "function", "signature": "( user_id: int, role_name: str = Body(..., embed=True), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "batch_import_users", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def batch_import_users($/", "language": "Python", "kind": "function", "signature": "( users: List[UserCreate] = Body(...), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "create_group", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def create_group(group_in: GroupCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(group_in: GroupCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "create_org", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def create_org(org_in: OrgCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(org_in: OrgCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "create_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def create_user(user_in: UserCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(user_in: UserCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_group", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def delete_group(group_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(group_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_org", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def delete_org(org_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(org_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def delete_user(user_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(user_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "get_group", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def get_group(group_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(group_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "get_org", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def get_org(org_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(org_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "get_user_by_id", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def get_user_by_id(user_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(user_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "list_groups", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def list_groups($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_db), org_id: Optional[int] = Query(None, description=\"Filter by organization\"), skip: int = 0, limit: int = 50, )"}, {"_type": "tag", "name": "list_orgs", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def list_orgs(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(skip: int = 0, limit: int = 20, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "list_users", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def list_users($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_db), skip: int = 0, limit: int = 50, org_id: Optional[int] = Query(None), admin_level: Optional[str] = Query(None, description=\"Role filter (Super Admin, State Admin, District Admin, Branch Admin, Member)\"), q: Optional[str] = Query(None, description=\"Free text user search\"), )"}, {"_type": "tag", "name": "remove_admin_role", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def remove_admin_role($/", "language": "Python", "kind": "function", "signature": "( user_id: int, role_name: str = Body(..., embed=True), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^router = APIRouter(prefix=\"\\/membership\", tags=[\"Users\", \"Groups\", \"Organizations\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_group", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def update_group(group_id: int, group_in: GroupCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(group_id: int, group_in: GroupCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "update_org", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def update_org(org_id: int, org_in: OrgCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(org_id: int, org_in: OrgCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "update_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/membership.py", "pattern": "/^def update_user(user_id: int, user_in: UserUpdate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(user_id: int, user_in: UserUpdate, db: Session = Depends(get_db))"}], "hash": "7689a22834f95d7c9daeb0fc5fd73052", "format-version": 4, "code-base-name": "membership_backend", "filename": "membership_backend/src/api/membership.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/membership\", tags=[\"Users\", \"Groups\", \"Organizations\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}