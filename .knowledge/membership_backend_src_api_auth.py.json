{"is_source_file": true, "format": "Python", "description": "This file implements authentication endpoints, role-based access control, user management, JWT handling, and multi-tenant support for a FastAPI-based SaaS platform. It contains route definitions for sign-up, login, user info retrieval, and RBAC-protected endpoints, along with utility functions for password hashing and token creation.", "external_files": ["src.api.models", "src.api.openapi_schemas"], "external_methods": ["jwt.encode", "jwt.decode"], "published": ["/auth/signup", "/auth/login", "/auth/me", "/rbac/superadmin", "/rbac/stateadmin", "/rbac/branchadmin", "/rbac/member", "/org/context"], "classes": [{"name": "APIRouter", "description": "FastAPI router instance managing authentication and RBAC endpoints."}], "methods": [{"name": "str hash_password(password: str)", "description": "Hash a password using bcrypt.", "scope": "", "scopeKind": ""}, {"name": "bool verify_password(plain_password: str, hashed_password: str)", "description": "Verify that a plaintext password matches its hashed version.", "scope": "", "scopeKind": ""}, {"name": "str create_access_token(data: dict, expires_delta: Optional[timedelta] = None)", "description": "Create a JWT token with optional expiration.", "scope": "", "scopeKind": ""}, {"name": "Optional[User] authenticate_user(db: Session, email: str, password: str)", "description": "Authenticate user credentials against the database.", "scope": "", "scopeKind": ""}, {"name": "Optional[User] get_user(db: Session, user_id: int)", "description": "Retrieve a user by ID from the database.", "scope": "", "scopeKind": ""}, {"name": "User get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))", "description": "Dependency to get the current authenticated user from JWT.", "scope": "", "scopeKind": ""}, {"name": "rbac_required(*allowed_roles: str)", "description": "Dependency generator for role-based access control enforcement.", "scope": "", "scopeKind": ""}, {"name": "org_partitioned(current_user: User = Depends(get_current_user))", "description": "Dependency that provides current user's organization ID for multi-tenancy.", "scope": "", "scopeKind": ""}, {"name": "branch_admin(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "dependency(current_user: User = Depends(get_current_user))", "scope": "rbac_required", "scopeKind": "function", "description": "unavailable"}, {"name": "get_db()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "List[str] get_roles_for_user(user: User)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "me(current_user: User = Depends(get_current_user))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "member_access(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\", \"Member\")))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "org_context(current_user: User = Depends(get_current_user))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "signup(user_in: UserCreate, db: Session = Depends(get_db), request: Request = None)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "state_admin(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\")))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "super_admin_only()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["jwt.encode", "jwt.decode", "get_user", "verify_password", "hash_password", "create_access_token", "get_db", "authenticate_user"], "search-terms": ["JWT_SECRET_KEY", "rbac_required", "signup", "login", "auth", "multi-tenant", "Role", "User", "OAuth2PasswordBearer"], "state": 2, "file_id": 8, "knowledge_revision": 20, "git_revision": "068693ede46b020019bbae61d8ea39820062a1f5", "revision_history": [{"18": "068693ede46b020019bbae61d8ea39820062a1f5"}, {"20": "068693ede46b020019bbae61d8ea39820062a1f5"}], "ctags": [{"_type": "tag", "name": "DATABASE_URL", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^DATABASE_URL = os.environ.get(\"DATABASE_URL\", \"sqlite:\\/\\/\\/.\\/test.db\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "JWT_ACCESS_TOKEN_EXPIRE_MINUTES", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^JWT_ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24  # 24hr default$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "JWT_ALGORITHM", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^JWT_ALGORITHM = \"HS256\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "JWT_SECRET_KEY", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^JWT_SECRET_KEY = os.environ.get(\"JWT_SECRET_KEY\", \"devsecretkey\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "SessionLocal", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "authenticate_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def authenticate_user(db: Session, email: str, password: str) -> Optional[User]:$/", "language": "Python", "typeref": "typename:Optional[User]", "kind": "function", "signature": "(db: Session, email: str, password: str)"}, {"_type": "tag", "name": "branch_admin", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def branch_admin(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", /", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")))"}, {"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(data: dict, expires_delta: Optional[timedelta] = None)"}, {"_type": "tag", "name": "dependency", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^    def dependency(current_user: User = Depends(get_current_user)):$/", "file": true, "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))", "scope": "rbac_required", "scopeKind": "function"}, {"_type": "tag", "name": "engine", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^engine = create_engine(DATABASE_URL, connect_args={\"check_same_thread\": False} if DATABASE_URL.s/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -/", "language": "Python", "typeref": "typename:User", "kind": "function", "signature": "(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def get_db():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_roles_for_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def get_roles_for_user(user: User) -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "function", "signature": "(user: User)"}, {"_type": "tag", "name": "get_user", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def get_user(db: Session, user_id: int) -> Optional[User]:$/", "language": "Python", "typeref": "typename:Optional[User]", "kind": "function", "signature": "(db: Session, user_id: int)"}, {"_type": "tag", "name": "hash_password", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def hash_password(password: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(password: str)"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))/", "language": "Python", "kind": "function", "signature": "(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "me", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def me(current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "member_access", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def member_access(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\",/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\", \"Member\")))"}, {"_type": "tag", "name": "oauth2_scheme", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"\\/auth\\/login\", auto_error=False)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "org_context", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def org_context(current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "org_partitioned", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def org_partitioned(current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "pwd_context", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "rbac_required", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def rbac_required(*allowed_roles: str):$/", "language": "Python", "kind": "function", "signature": "(*allowed_roles: str)"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^router = APIRouter(tags=[\"Authentication\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "signup", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def signup(user_in: UserCreate, db: Session = Depends(get_db), request: Request = None):$/", "language": "Python", "kind": "function", "signature": "(user_in: UserCreate, db: Session = Depends(get_db), request: Request = None)"}, {"_type": "tag", "name": "state_admin", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def state_admin(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\")))/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\")))"}, {"_type": "tag", "name": "super_admin_only", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^async def super_admin_only():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/auth.py", "pattern": "/^def verify_password(plain_password: str, hashed_password: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(plain_password: str, hashed_password: str)"}], "hash": "8b00b08aec502c1e050684369dd02508", "format-version": 4, "code-base-name": "membership_backend", "filename": "membership_backend/src/api/auth.py", "fields": [{"name": "DATABASE_URL = os.environ.get(\"DATABASE_URL\", \"sqlite:\\/\\/\\/.\\/test.db\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "JWT_ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24  # 24hr default", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "JWT_ALGORITHM = \"HS256\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "JWT_SECRET_KEY = os.environ.get(\"JWT_SECRET_KEY\", \"devsecretkey\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "engine = create_engine(DATABASE_URL, connect_args={\"check_same_thread\": False} if DATABASE_URL.s/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"\\/auth\\/login\", auto_error=False)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "router = APIRouter(tags=[\"Authentication\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}