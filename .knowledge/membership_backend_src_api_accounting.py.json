{"is_source_file": true, "format": "Python", "description": "Source code for API endpoints managing categorized financial transactions (income and expenses), including recording, listing, retrieving, updating, and deleting transactions with role-based access control. Implements RESTful API routes using FastAPI and SQLAlchemy ORM.", "external_files": ["src.api.models", "src.api.schemas", "src.api.auth"], "external_methods": ["get_db", "get_current_user", "rbac_required"], "published": ["router"], "classes": [{"name": "Transaction", "description": "ORM model for financial transactions, representing income or expense records."}, {"name": "User", "description": "User model containing user details and roles for access control."}], "methods": [{"name": "record_transaction( transaction_in: TransactionCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )", "description": "Creates a new financial transaction record, only accessible to admin roles.", "scope": "", "scopeKind": ""}, {"name": "list_transactions( db: Session = Depends(get_db), account: Optional[str] = Query(None, description=\"Filter by account\"), category: Optional[str] = Query(None, description=\"Category filter\"), from_date: Optional[date] = Query(None, description=\"From date\"), to_date: Optional[date] = Query(None, description=\"To date\"), transaction_type: Optional[str] = Query(None, description=\"'income' or 'expense'\"), skip: int = 0, limit: int = 100, current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\", \"Member\")), )", "description": "Retrieves a list of transactions with optional filters; members see only their own, admins see all.", "scope": "", "scopeKind": ""}, {"name": "get_transaction( transaction_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user), )", "description": "Fetches details of a specific transaction by ID, with access restricted to owners for members.", "scope": "", "scopeKind": ""}, {"name": "delete_transaction( transaction_id: int, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )", "description": "Deletes a transaction by ID, restricted to admin roles.", "scope": "", "scopeKind": ""}, {"name": "update_transaction( transaction_id: int, transaction_in: TransactionCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )", "description": "Updates details of an existing transaction, restricted to admin roles.", "scope": "", "scopeKind": ""}], "calls": ["db.add", "db.commit", "db.refresh", "db.query", "db.delete", "db.filter", "db.all", "db.first"], "search-terms": ["accounting.py", "transactions API", "role-based access", "Financial transactions", "Categorized income expenses", "FastAPI endpoints"], "state": 2, "file_id": 14, "knowledge_revision": 39, "git_revision": "", "ctags": [{"_type": "tag", "name": "delete_transaction", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/accounting.py", "pattern": "/^def delete_transaction($/", "language": "Python", "kind": "function", "signature": "( transaction_id: int, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )"}, {"_type": "tag", "name": "get_transaction", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/accounting.py", "pattern": "/^def get_transaction($/", "language": "Python", "kind": "function", "signature": "( transaction_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user), )"}, {"_type": "tag", "name": "list_transactions", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/accounting.py", "pattern": "/^def list_transactions($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_db), account: Optional[str] = Query(None, description=\"Filter by account\"), category: Optional[str] = Query(None, description=\"Category filter\"), from_date: Optional[date] = Query(None, description=\"From date\"), to_date: Optional[date] = Query(None, description=\"To date\"), transaction_type: Optional[str] = Query(None, description=\"'income' or 'expense'\"), skip: int = 0, limit: int = 100, current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\", \"Member\")), )"}, {"_type": "tag", "name": "record_transaction", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/accounting.py", "pattern": "/^def record_transaction($/", "language": "Python", "kind": "function", "signature": "( transaction_in: TransactionCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/accounting.py", "pattern": "/^router = APIRouter(prefix=\"\\/accounting\", tags=[\"Accounting\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_transaction", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/accounting.py", "pattern": "/^def update_transaction($/", "language": "Python", "kind": "function", "signature": "( transaction_id: int, transaction_in: TransactionCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )"}], "hash": "09b6b0039fd2a6aa3744bda5ad41be2f", "format-version": 4, "code-base-name": "membership_backend", "filename": "membership_backend/src/api/accounting.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/accounting\", tags=[\"Accounting\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"39": ""}]}