{"is_source_file": true, "format": "Python", "description": "This file defines API endpoints for event management in a web application. It includes CRUD operations for events, RSVP handling, event listing with filters, and user-specific event queries. The file utilizes FastAPI for routing, SQLAlchemy ORM models, and includes role-based access control and OpenAPI documentation.", "external_files": ["src.api.models", "src.api.schemas", "src.api.auth"], "external_methods": ["get_db", "get_current_user", "rbac_required"], "published": ["router"], "classes": [], "methods": [{"name": "create_event( event_in: EventCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )", "description": "Creates a new event linked to an organization, with access restricted to certain roles.", "scope": "", "scopeKind": ""}, {"name": "list_events( db: Session = Depends(get_db), org_id: Optional[int] = Query(None, description=\"Organization ID\"), upcoming_only: Optional[bool] = Query(False, description=\"Only include upcoming events\"), attendee_user_id: Optional[int] = Query(None, description=\"List only events user RSVP'd to\"), )", "description": "Retrieves a list of events, with optional filters for organization, upcoming events, and RSVP status.", "scope": "", "scopeKind": ""}, {"name": "get_event(event_id: int, db: Session = Depends(get_db))", "description": "Fetches detailed information about a specific event by its ID.", "scope": "", "scopeKind": ""}, {"name": "update_event( event_id: int, event_in: EventCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )", "description": "Updates an existing event; access restricted to admin roles.", "scope": "", "scopeKind": ""}, {"name": "delete_event( event_id: int, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )", "description": "Deletes a specified event; access restricted to admin roles.", "scope": "", "scopeKind": ""}, {"name": "rsvp_event( event_id: int, rsvp_status: str = Body(..., embed=True, description=\"RSVP status: going, maybe, not_going\"), db: Session = Depends(get_db), current_user: User = Depends(get_current_user) )", "description": "Allows a user to RSVP or change RSVP status for an event.", "scope": "", "scopeKind": ""}, {"name": "events_user_rsvp( user_id: int, db: Session = Depends(get_db) )", "description": "Lists all events that a specific user has RSVP'd to.", "scope": "", "scopeKind": ""}], "calls": ["get_db", "get_current_user", "rbac_required"], "search-terms": ["event CRUD", "RSVP endpoint", "event listing filters", "attendee management", "role-based access control"], "state": 2, "file_id": 12, "knowledge_revision": 36, "git_revision": "f569dec568f13146243dac3e81fac58b2090a74a", "revision_history": [{"33": ""}, {"36": "f569dec568f13146243dac3e81fac58b2090a74a"}], "ctags": [{"_type": "tag", "name": "create_event", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def create_event($/", "language": "Python", "kind": "function", "signature": "( event_in: EventCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )"}, {"_type": "tag", "name": "delete_event", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def delete_event($/", "language": "Python", "kind": "function", "signature": "( event_id: int, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )"}, {"_type": "tag", "name": "events_user_rsvp", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def events_user_rsvp($/", "language": "Python", "kind": "function", "signature": "( user_id: int, db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_event", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def get_event(event_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(event_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "list_events", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def list_events($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_db), org_id: Optional[int] = Query(None, description=\"Organization ID\"), upcoming_only: Optional[bool] = Query(False, description=\"Only include upcoming events\"), attendee_user_id: Optional[int] = Query(None, description=\"List only events user RSVP'd to\"), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^router = APIRouter(prefix=\"\\/events\", tags=[\"Events\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "rsvp_event", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def rsvp_event($/", "language": "Python", "kind": "function", "signature": "( event_id: int, rsvp_status: str = Body(..., embed=True, description=\"RSVP status: going, maybe, not_going\"), db: Session = Depends(get_db), current_user: User = Depends(get_current_user) )"}, {"_type": "tag", "name": "update_event", "path": "/home/kavia/workspace/code-generation/membersphere-platform-22477-22482/membership_backend/src/api/events.py", "pattern": "/^def update_event($/", "language": "Python", "kind": "function", "signature": "( event_id: int, event_in: EventCreate, db: Session = Depends(get_db), current_user: User = Depends(rbac_required(\"Super Admin\", \"State Admin\", \"District Admin\", \"Branch Admin\")), )"}], "hash": "71971f302923368b3d06a79a1ca21917", "format-version": 4, "code-base-name": "membership_backend", "filename": "membership_backend/src/api/events.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/events\", tags=[\"Events\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}